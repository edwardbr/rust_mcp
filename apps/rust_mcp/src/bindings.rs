// Generated by `wit-bindgen` 0.41.0. DO NOT EDIT!
// Options used:
//   * runtime_path: "wit_bindgen_rt"
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_register_routes_cabi<T: Guest>() {
    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
    T::register_routes();
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_load_from_ledger_cabi<T: Guest>(arg0: *mut u8, arg1: usize) {
    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
    let len0 = arg1;
    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
    T::load_from_ledger(_rt::string_lift(bytes0));
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_insert_in_ledger_cabi<T: Guest>(arg0: *mut u8, arg1: usize) {
    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
    let len0 = arg1;
    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
    T::insert_in_ledger(_rt::string_lift(bytes0));
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_cricket_scores_cabi<T: Guest>(arg0: *mut u8, arg1: usize) {
    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
    let len0 = arg1;
    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
    T::cricket_scores(_rt::string_lift(bytes0));
}
pub trait Guest {
    fn register_routes() -> ();
    fn load_from_ledger(cmd: _rt::String) -> ();
    fn insert_in_ledger(cmd: _rt::String) -> ();
    fn cricket_scores(cmd: _rt::String) -> ();
}
#[doc(hidden)]
macro_rules! __export_world_rust_mcp_cabi {
    ($ty:ident with_types_in $($path_to_types:tt)*) => {
        const _ : () = { #[unsafe (export_name = "register-routes")] unsafe extern "C" fn
        export_register_routes() { unsafe { $($path_to_types)*::
        _export_register_routes_cabi::<$ty > () } } #[unsafe (export_name =
        "load-from-ledger")] unsafe extern "C" fn export_load_from_ledger(arg0 : * mut
        u8, arg1 : usize,) { unsafe { $($path_to_types)*::
        _export_load_from_ledger_cabi::<$ty > (arg0, arg1) } } #[unsafe (export_name =
        "insert-in-ledger")] unsafe extern "C" fn export_insert_in_ledger(arg0 : * mut
        u8, arg1 : usize,) { unsafe { $($path_to_types)*::
        _export_insert_in_ledger_cabi::<$ty > (arg0, arg1) } } #[unsafe (export_name =
        "cricket-scores")] unsafe extern "C" fn export_cricket_scores(arg0 : * mut u8,
        arg1 : usize,) { unsafe { $($path_to_types)*:: _export_cricket_scores_cabi::<$ty
        > (arg0, arg1) } } };
    };
}
#[doc(hidden)]
pub(crate) use __export_world_rust_mcp_cabi;
#[rustfmt::skip]
mod _rt {
    #![allow(dead_code, clippy::all)]
    #[cfg(target_arch = "wasm32")]
    pub fn run_ctors_once() {
        wit_bindgen_rt::run_ctors_once();
    }
    pub use alloc_crate::vec::Vec;
    pub unsafe fn string_lift(bytes: Vec<u8>) -> String {
        if cfg!(debug_assertions) {
            String::from_utf8(bytes).unwrap()
        } else {
            String::from_utf8_unchecked(bytes)
        }
    }
    pub use alloc_crate::string::String;
    extern crate alloc as alloc_crate;
}
/// Generates `#[unsafe(no_mangle)]` functions to export the specified type as
/// the root implementation of all generated traits.
///
/// For more information see the documentation of `wit_bindgen::generate!`.
///
/// ```rust
/// # macro_rules! export{ ($($t:tt)*) => (); }
/// # trait Guest {}
/// struct MyType;
///
/// impl Guest for MyType {
///     // ...
/// }
///
/// export!(MyType);
/// ```
#[allow(unused_macros)]
#[doc(hidden)]
macro_rules! __export_rust_mcp_impl {
    ($ty:ident) => {
        self::export!($ty with_types_in self);
    };
    ($ty:ident with_types_in $($path_to_types_root:tt)*) => {
        $($path_to_types_root)*:: __export_world_rust_mcp_cabi!($ty with_types_in
        $($path_to_types_root)*);
    };
}
#[doc(inline)]
pub(crate) use __export_rust_mcp_impl as export;
#[cfg(target_arch = "wasm32")]
#[unsafe(
    link_section = "component-type:wit-bindgen:0.41.0:component:rust-mcp:rust-mcp:encoded world"
)]
#[doc(hidden)]
#[allow(clippy::octal_escapes)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 261] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07\x86\x01\x01A\x02\x01\
A\x06\x01@\0\x01\0\x04\0\x0fregister-routes\x01\0\x01@\x01\x03cmds\x01\0\x04\0\x10\
load-from-ledger\x01\x01\x04\0\x10insert-in-ledger\x01\x01\x04\0\x0ecricket-scor\
es\x01\x01\x04\0\x1bcomponent:rust-mcp/rust-mcp\x04\0\x0b\x0e\x01\0\x08rust-mcp\x03\
\0\0\0G\x09producers\x01\x0cprocessed-by\x02\x0dwit-component\x070.227.1\x10wit-\
bindgen-rust\x060.41.0";
#[inline(never)]
#[doc(hidden)]
pub fn __link_custom_section_describing_imports() {
    wit_bindgen_rt::maybe_link_cabi_realloc();
}
